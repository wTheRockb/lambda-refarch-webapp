AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Sample todo serverless web application
Globals:
  Function:
    Runtime: nodejs12.x
    Timeout: 60
    Tracing: Active
    MemorySize: 1024
    Tags:
      Application: serverless-web-app
  Api:
    Auth:
      UsagePlan:
        UsagePlanName: DailyUsagePlan
        CreateUsagePlan: PER_API
        Description: This will limit 5000 executions per day and throttle executions
          on 10% of that.
        Quota:
          Limit: 5000
          Period: DAY
        Throttle:
          BurstLimit: 100
          RateLimit: 50
Parameters:
  VersionParam:
    Type: String
    Default: v1
  StageNameParam:
    Type: String
    Default: prod
  CognitoDomainName:
    Type: String
    Default: mytodoappdemo
  Repository:
    Type: String
    Description: GitHub Repository URL
  Branch:
    Type: String
    Description: GitHub Branch
    Default: master
  OauthToken:
    Type: String
    Description: GitHub Repository URL
    NoEcho: true
Resources:
  TodoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      UserPoolName: TodoUsers
      UsernameAttributes:
      - email
      AutoVerifiedAttributes:
      - email
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: true
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: true
  TodoUserPoolTokenClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId:
        Ref: TodoUserPool
      GenerateSecret: false
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
      - code
      - implicit
      CallbackURLs:
      - http://localhost:3000
      - http://localhost:8080
      - https://localhost
      - Fn::Join:
        - ''
        - - https://
          - Fn::GetAtt:
            - AmplifyBranch
            - BranchName
          - .
          - Fn::GetAtt:
            - AmplifyApp
            - DefaultDomain
      SupportedIdentityProviders:
      - COGNITO
      AllowedOAuthScopes:
      - phone
      - email
      - openid
      ExplicitAuthFlows:
      - USER_PASSWORD_AUTH
  TodoDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain:
        Fn::Join:
        - '-'
        - - Ref: CognitoDomainName
          - Ref: AWS::StackName
      UserPoolId:
        Ref: TodoUserPool
  TodoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Join:
        - '-'
        - - todo-table
          - Ref: AWS::StackName
      KeySchema:
      - AttributeName: cognito-username
        KeyType: HASH
      - AttributeName: id
        KeyType: RANGE
      AttributeDefinitions:
      - AttributeName: cognito-username
        AttributeType: S
      - AttributeName: id
        AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: true
  ConstituentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Join:
        - '-'
        - - constituents-table
          - Ref: AWS::StackName
      KeySchema:
      - AttributeName: email
        KeyType: HASH
      AttributeDefinitions:
      - AttributeName: email
        AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: true
  TodoApi:
    Type: AWS::Serverless::Api
    MethodSettings:
      DataTraceEnabled: true
      MetricsEnabled: true
      HttpMethod: '*'
      ResourcePath:
        Fn::Sub: ${VersionParam}/*
      LoggingLevel: INFO
    AccessLogSetting:
      DestinationArn:
        Fn::Sub: arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${ApiAccessLogGroup}
      Format: $context.identity.sourceIp $context.authorizer.claims.sub [$context.requestTime]
        "$context.httpMethod $context.resourcePath $context.protocol" $context.status
        $context.requestId $context.awsEndpointRequestId $context.xrayTraceId $context.responseLatency
        $context.integrationLatency "$context.error.message"
    Properties:
      Name: TodoApi
      StageName:
        Ref: StageNameParam
      TracingEnabled: true
      Cors:
        AllowOrigin: '''*'''
        AllowMethods: '''OPTIONS,HEAD,GET,PUT,POST,DELETE'''
        AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
  GetAllConstituentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://woody-lambda-refarch-west-2/cec77e784a86bfd2a3cc82a01184382b
      Handler: app.getAllConstituentsItem
      Tracing: Active
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: ConstituentsTable
      - CloudWatchPutMetricPolicy: {}
      Environment:
        Variables:
          TABLE_NAME:
            Ref: ConstituentsTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
          ENDPOINT_OVERRIDE: ''
      Events:
        GetItem:
          Type: Api
          Properties:
            Path: /item
            Method: get
            RestApiId:
              Ref: TodoApi
  ApiGatewayPushToCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Push logs to CloudWatch logs from API Gateway
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/apigateway/AccessLog-${TodoApi}
      RetentionInDays: 365
  AmplifyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - amplify.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: Amplify
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action: amplify:*
            Resource: '*'
  AmplifyApp:
    Type: AWS::Amplify::App
    Properties:
      Name: TodoApp
      Repository:
        Ref: Repository
      Description: Todo example app
      OauthToken:
        Ref: OauthToken
      BuildSpec: "version: 0.1\nfrontend:\n  phases:\n    build:\n      commands:\n\
        \        - cd www/src\n        - npm install\n        - npm run build\n  artifacts:\n\
        \    baseDirectory: www/build/\n    files:\n      - '**/*'"
      Tags:
      - Key: Name
        Value: Todo
      IAMServiceRole:
        Fn::GetAtt:
        - AmplifyRole
        - Arn
  AmplifyBranch:
    Type: AWS::Amplify::Branch
    Properties:
      BranchName:
        Ref: Branch
      AppId:
        Fn::GetAtt:
        - AmplifyApp
        - AppId
      Description: Amplify Console Branch
      EnableAutoBuild: true
      Tags:
      - Key: Name
        Value: todo-amplify-console
      - Key: Branch
        Value:
          Ref: Branch
Outputs:
  TodoFunctionApi:
    Description: API Gateway endpoint URL for Prod stage
    Value:
      Fn::Sub: https://${TodoApi}.execute-api.${AWS::Region}.amazonaws.com/{StageNameParam}
  CognitoID:
    Description: The Cognito UserPool ID
    Value:
      Ref: TodoUserPool
  CognitoClientID:
    Description: The Cognito UserPool Client ID
    Value:
      Ref: TodoUserPoolTokenClient
  CognitoDomainName:
    Description: The Cognito Hosted UI Domain Name
    Value:
      Fn::Join:
      - ''
      - - Ref: CognitoDomainName
        - '-'
        - Ref: AWS::StackName
        - .auth.
        - Ref: AWS::Region
        - .amazoncognito.com
  AmplifyURL:
    Value:
      Fn::Join:
      - ''
      - - https://
        - Fn::GetAtt:
          - AmplifyBranch
          - BranchName
        - .
        - Fn::GetAtt:
          - AmplifyApp
          - DefaultDomain
